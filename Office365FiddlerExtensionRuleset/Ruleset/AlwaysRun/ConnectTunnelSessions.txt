// Connect Tunnel.
//
// Check for connect tunnel with no usable data in the response body.
//
// This check does not work for sessions which have not been loaded from a SAZ file.
// My best guess is this is a timing issue, where the data is not immediately available when this check runs.
// SetSessionType makes exactly the same call later on down the code path and it works.
if (this.session.isTunnel)
{
	string TLS;

	GetSetSessionFlags.Instance.WriteToFiddlerLog(this.session, "Broad Logic Checks (connect tunnel).");
	// TLS 1.0 in request/response pair.

	// Request:
	//   Version: 3.1 (TLS/1.0)

	//Response:
	//   Secure Protocol: Tls
	//   Cipher: Aes256 256bits
	//   Hash Algorithm: Sha1 160bits

	if (this.session.utilFindInResponse("Secure Protocol: Tls10", false) > 1 || this.session.utilFindInResponse("(TLS/1.0)", false) > 1)
	{
		TLS = "TLS 1.0";
	}
	// TLS 1.1 in request/response pair.
	else if (this.session.utilFindInResponse("Secure Protocol: Tls11", false) > 1 || this.session.utilFindInRequest("(TLS/1.1)", false) > 1)
	{
		TLS = "TLS 1.1";
	}
	// TLS 1.2 in request/response pair.
	else if (this.session.utilFindInRequest("Secure Protocol: Tls12", false) > 1 || this.session.utilFindInRequest("(TLS/1.2)", false) > 1)
	{
		TLS = "TLS 1.2";
	}
	else
	{
		// If we cannot determine the TLS version do nothing.
		// This can happen when live tracing traffic. The request/responses cannot be read fast enough to get accurate results.
		TLS = "TLS Unknown";
	}

	// 11/1/2022 -- There was some old code accompanying this comment, leaving this as it might be useful information for the future.

	// Trying to check session response body for a string value using !this.session.bHasResponse does not impact performance, but is not reliable.
	// Using this.session.GetResponseBodyAsString().Length == 0 kills performance. Fiddler wouldn't even load with this code in place.
	// Ideally looking to do: if (this.session.utilFindInResponse("CONNECT tunnel, through which encrypted HTTPS traffic flows", false) > 1)
	// Only works reliably when loading a SAZ file and request/response data is immediately available to do logic checks against.

	GetSetSessionFlags.Instance.SetUIBackColour(this.session, "Orange");
	GetSetSessionFlags.Instance.SetUITextColour(this.session, "black");

	GetSetSessionFlags.Instance.SetXResponseAlert(this.session, "Connect Tunnel");
	GetSetSessionFlags.Instance.SetXResponseComments(this.session, "This is an encrypted tunnel. If all or most of the sessions are connect tunnels "
		+ "the sessions collected did not have decryption enabled. Setup Fiddler to 'Decrypt HTTPS traffic', click Tools -> Options -> HTTPS tab."
		+ "<p>If in any doubt see instructions at https://docs.telerik.com/fiddler/Configure-Fiddler/Tasks/DecryptHTTPS. </p>");

	switch (this.session.responseCode)
	{
		case 403:
			// If this is a HTTP 403 we need analysis on this session.
			// I have seen HTTP 403 connect tunnels actually show interesting data in authentication scenarios.
			GetSetSessionFlags.Instance.SetSessionType(this.session, "Connect Tunnel: " + TLS);
			GetSetSessionFlags.Instance.SetSessionAuthenticationConfidenceLevel(this.session, "5");
			GetSetSessionFlags.Instance.SetSessionTypeConfidenceLevel(this.session, "5");
			GetSetSessionFlags.Instance.SetSessionResponseServerConfidenceLevel(this.session, "5");
			break;
		case 200:
			GetSetSessionFlags.Instance.SetResponseCodeDescription(this.session, "200 OK");

			GetSetSessionFlags.Instance.SetSessionType(this.session, "Connect Tunnel: " + TLS);
			GetSetSessionFlags.Instance.SetXAuthentication(this.session, "Connect Tunnel: " + TLS);
			GetSetSessionFlags.Instance.SetXResponseServer(this.session, "Connect Tunnel: " + TLS);

			// Absolute certainly we don't want to do anything further with this session.
			GetSetSessionFlags.Instance.SetSessionAuthenticationConfidenceLevel(this.session, "10");
			GetSetSessionFlags.Instance.SetSessionTypeConfidenceLevel(this.session, "10");
			GetSetSessionFlags.Instance.SetSessionResponseServerConfidenceLevel(this.session, "10");
			break;
	}
}